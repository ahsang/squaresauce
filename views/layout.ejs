<!DOCTYPE html>
<html>
  <head>

  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta content="Create online campuses - one square at a time" name="description" />
    <meta content="Squaresauce Team" name="author" />

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/bootstrap3-wysihtml5.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/jquery.scrollbar.css">
    <link rel="stylesheet" href="/styles/pace-theme-flash.css">
    <link rel="stylesheet" href="/styles/select2.css">
    <link rel="stylesheet" href="/styles/switchery.min.css">
    <link rel="stylesheet" href="/styles/windows.chrome.fix.css">
    <!--STYLES END-->
  </head>

  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/angular.min.js"></script>
    <script src="/js/dependencies/bootstrap.min.js"></script>
    <script src="/js/dependencies/bootstrap3-wysihtml5.all.min.js"></script>
    <script src="/js/dependencies/classie.js"></script>
    <script src="/js/dependencies/jquery-easy.js"></script>
    <script src="/js/dependencies/jquery-ui.min.js"></script>
    <script src="/js/dependencies/jquery.actual.min.js"></script>
    <script src="/js/dependencies/jquery.bez.min.js"></script>
    <script src="/js/dependencies/jquery.ioslist.min.js"></script>
    <script src="/js/dependencies/jquery.menuclipper.js"></script>
    <script src="/js/dependencies/jquery.scrollbar.min.js"></script>
    <script src="/js/dependencies/jquery.unveil.min.js"></script>
    <script src="/js/dependencies/modernizr.custom.js"></script>
    <script src="/js/dependencies/pace.min.js"></script>
    <script src="/js/dependencies/scripts.js"></script>
    <script src="/js/dependencies/select2.min.js"></script>
    <script src="/js/dependencies/ss.email.js"></script>
    <script src="/js/dependencies/ss.min.js"></script>
    <script src="/js/dependencies/switchery.min.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
